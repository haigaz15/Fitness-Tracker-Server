datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model ExerciseOnWorkout {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  exercise      Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId    String   @db.ObjectId
  workout       Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId     String   @db.ObjectId
  exerciseIndex Int
  set           Int
  reps          String
  rest          String?
  weight        String?
}

model Exercise {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  type             String
  description      String
  primaryMuscle    MuscleGroup
  secondaryMuscles String
  category         ExerciseCategory
  difficulty       ExerciseDifficulty
  workouts         ExerciseOnWorkout[]

  @@unique([name])
}

model Workout {
  id              String              @id @default(auto()) @map("_id") @db.ObjectId
  externalId      String              @unique @default(uuid())
  name            String
  startTime       DateTime?
  endTime         DateTime?
  workoutDate     DateTime?
  exercises       ExerciseOnWorkout[]
  notes           String?
  userId          String              @db.ObjectId
  user            User                @relation(fields: [userId], references: [id])
  workoutSessions WorkoutSession[]
}

model WorkoutSession {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  externalId  String   @unique @default(uuid())
  sessionDate DateTime
  sessionTime Int
  totalReps   Int
  totalSets   Int
  totalWeight Int
  totalRest   Int
  workoutId   String?  @db.ObjectId
  workout     Workout? @relation(fields: [workoutId], references: [id], onDelete: SetNull)
}

model User {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  firstName        String
  lastName         String
  username         String          @unique
  email            String
  password         String
  role             String          @default("member")
  weight           Float?
  height           Float?
  workouts         Workout[]
  bodyMuscleSizeId String?         @db.ObjectId
  bodyMuscleSize   BodyMuscleSize? @relation(fields: [bodyMuscleSizeId], references: [id])
}

model BodyMuscleSize {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  chestSize      Float?
  upperChestSize Float?
  lowerChestSize Float?
  shouldersSize  Float?
  frontDeltsSize Float?
  sideDeltsSize  Float?
  rearDeltsSize  Float?
  trapsSize      Float?
  latsSize       Float?
  midBackSize    Float?
  lowerBackSize  Float?
  bicepsSize     Float?
  tricepsSize    Float?
  forearmsSize   Float?
  absSize        Float?
  obliquesSize   Float?
  glutesSize     Float?
  quadsSize      Float?
  hamstringsSize Float?
  adductorsSize  Float?
  calvesSize     Float?
  user           User[]
}

enum MuscleGroup {
  ABDUCTORS
  ADDUCTORS
  BICEPS
  CALVES
  DELTOIDS
  ERECTOR_SPINAE
  FOREARMS
  GLUTES
  HAMSTRINGS
  LATS
  OBLIQUES
  PECTORALS
  QUADRICEPS
  SERRATUS
  TRAPEZIUS
  TRICEPS
  UPPER_ABS
  LOWER_ABS
  SOLEUS
  WRIST_FLEXORS
  BRACHIORADIALIS
  LOWER_BACK
  RHOMBOIDS
}

enum ExerciseCategory {
  CHEST
  SHOULDERS
  LEGS
  ARMS
  BACK
  CORE
  CARDIO
  STRETCH
}

enum ExerciseDifficulty {
  EASY
  MEDIUM
  HARD
}
